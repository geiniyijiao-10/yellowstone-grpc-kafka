name: Docker CICD DEV

on:
  push:
    branches:
      - 'dev'      
#    tags:
#      - 'v*'
  workflow_dispatch:

env:
  CARGO_TERM_COLOR: always

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - uses: actions/cache@v4
        with:
          path: |
              ~/.cargo/bin/
              ~/.cargo/registry/index/
              ~/.cargo/registry/cache/
              ~/.cargo/git/db/
              ./target
          key: ubuntu-latest-cargo-${{ hashFiles('rust-toolchain.toml') }}-${{ hashFiles('**/Cargo.lock') }}-v001
          restore-keys: |
            ubuntu-latest-cargo-${{ hashFiles('rust-toolchain.toml') }}

      - name: Set rust version
        run: |
          RUST_VERSION="$(grep -oP 'channel = "\K\d\.\d+\.\d+(?=")' rust-toolchain.toml)"
          echo "RUST_VERSION=$RUST_VERSION" >> "$GITHUB_ENV"

      - uses: dtolnay/rust-toolchain@stable
        with:
          toolchain: ${{ env.RUST_VERSION }}
          components: clippy

      - name: Install dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y libsasl2-dev protobuf-compiler

      - name: Build release
        run: cargo build --release --bin grpc-kafka

      - name: Deleteing directories to avoid upload conflict
        run: |
          rm -rf \
            target/release/grpc-kafka.d

      - uses: actions/upload-artifact@v4
        with:
          name: yellowstone-grpc-kafka-${{ github.sha }}
          path: |
            target/release/grpc-kafka

      - name: Log in to Alibaba Cloud Container Registry
        run: echo "${{ secrets.ALIYUN_REGISTRYPASS }}" | docker login -u "${{ secrets.ALIYUN_REGISTRYUSER }}" --password-stdin ${{ secrets.ACR_REGISTRY }}

      - name: Build Docker image
        run: |
          docker build -t ${{ secrets.ACR_REGISTRY }}/newx-dev/${{ github.event.repository.name }}:${{ github.sha }} .
      - name: Push Docker image to Alibaba Cloud
        run: docker push ${{ secrets.ACR_REGISTRY }}/newx-dev/${{ github.event.repository.name }}:${{ github.sha }}


  deploy:
    runs-on: ubuntu-latest
    needs: build

    steps:
    - name: Checkout code
      uses: actions/checkout@v3

    - name: Set up SSH
      uses: webfactory/ssh-agent@v0.5.4
      with:
        ssh-private-key: ${{ secrets.SECUREGATE_SSH_PRIVATE_KEY }}

    - name: Run Helm deploy
      run: |
        ssh -o StrictHostKeyChecking=no root@securegate.nyx.pro << 'EOF'
          cd /opt/charts
          ls /opt/charts
          helm upgrade --install mmo-grpc2kafka-test output/mmo-grpc2kafka-test \
            --set service.image=${{ secrets.ACR_REGISTRY }}/mmo-dev/${{ github.event.repository.name }} \
            --set service.imageTag=${{ github.sha }}\
            -n mmo-dev
        EOF
